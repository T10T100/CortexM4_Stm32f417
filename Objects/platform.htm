<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\platform.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\platform.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Dec 10 06:30:44 2015
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SystemEventBurner(void*) &rArr; void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1) &rArr; int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b2]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2e]">CAN1_RX0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2d]">CAN1_TX_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5a]">CAN2_RX0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5c]">CAN2_SCE_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[59]">CAN2_TX_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[69]">CRYP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[68]">DCMI_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[49]">DMA1_Stream7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[57]">ETH_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[58]">ETH_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4a]">FMC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6b]">FPU_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6a]">HASH_RNG_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[63]">I2C3_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[62]">I2C3_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5d]">OTG_FS_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[44]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1b]">PVD_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from stackswitching.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from stackswitching.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from stackswitching.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f417xx.o(.text)
 <LI><a href="#[1c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[33]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[50]">TIM6_DAC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[51]">TIM7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[45]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[48]">TIM8_CC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[47]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[46]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4e]">UART4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[61]">USART6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[74]">SystemEvent(void*)</a> from main.o(i._Z11SystemEventPv) referenced from main.o(i._Z18SystemEventBurner2Pv)
 <LI><a href="#[76]">eventServer(void*)</a> from event.o(i._Z11eventServerPv) referenced from vm.o(i._ZN7Runtime4initEjj)
 <LI><a href="#[77]">timerServer(void*)</a> from timerserver.o(i._Z11timerServerPv) referenced from vm.o(i._ZN7Runtime4initEjj)
 <LI><a href="#[73]">touchAnyListener(void*)</a> from main.o(i._Z16touchAnyListenerPv) referenced from main.o(i._Z17SystemEventBurnerPv)
 <LI><a href="#[75]">SystemEventBurner(void*)</a> from main.o(i._Z17SystemEventBurnerPv) referenced from vm.o(i._ZN7Runtime4initEjj)
 <LI><a href="#[78]">touchSensorServer(void*)</a> from touchsensorapiinterface.o(i._Z17touchSensorServerPv) referenced from vm.o(i._ZN7Runtime4initEjj)
 <LI><a href="#[71]">SystemEventBurner2(void*)</a> from main.o(i._Z18SystemEventBurner2Pv) referenced from main.o(i._Z17SystemEventBurnerPv)
 <LI><a href="#[70]">SystemEventBurner3(void*)</a> from main.o(i._Z18SystemEventBurner3Pv) referenced from main.o(i._Z17SystemEventBurnerPv)
 <LI><a href="#[7a]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[6f]">event(void*)</a> from main.o(i._Z5eventPv) referenced from main.o(i._Z17SystemEventBurnerPv)
 <LI><a href="#[72]">timer0(void*)</a> from main.o(i._Z6timer0Pv) referenced from main.o(i._Z17SystemEventBurnerPv)
 <LI><a href="#[79]">ArrayListBase&lang;Runnable&rang;::ArrayListBase()</a> from device.o(t._ZN13ArrayListBaseI8RunnableEC1Ev) referenced from device.o(i._ZN7RuntimeC2Ev)
 <LI><a href="#[7d]">ServerFactory&lang;DefaultServerListener&rang;::newListener(int(*)(void*))</a> from device.o(t._ZN13ServerFactoryI21DefaultServerListenerE11newListenerEPFiPvE) referenced from device.o(.constdata)
 <LI><a href="#[7d]">ServerFactory&lang;DefaultServerListener&rang;::newListener(int(*)(void*))</a> from device.o(t._ZN13ServerFactoryI21DefaultServerListenerE11newListenerEPFiPvE) referenced from device.o(.constdata__ZTV13ServerFactoryI21DefaultServerListenerE)
 <LI><a href="#[7d]">ServerFactory&lang;DefaultServerListener&rang;::newListener(int(*)(void*))</a> from device.o(t._ZN13ServerFactoryI21DefaultServerListenerE11newListenerEPFiPvE) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[6e]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[80]">Runtime::free(void*)</a> from device.o(i._ZN7Runtime4freeEPv) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[7f]">Runtime::alloc(unsigned)</a> from device.o(i._ZN7Runtime5allocEj) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[7e]">Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorI12GraphicFrameIttEE5allocEj) referenced from device.o(.constdata__ZTV19GraphicFrameFactoryIttE)
 <LI><a href="#[7e]">Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorI12GraphicFrameIttEE5allocEj) referenced from device.o(.constdata__ZTV9AllocatorI12GraphicFrameIttEE)
 <LI><a href="#[7c]">Allocator&lang;void*&rang;::free(void*)</a> from device.o(t._ZN9AllocatorIPvE4freeES0_) referenced 5 times from device.o(.constdata)
 <LI><a href="#[7c]">Allocator&lang;void*&rang;::free(void*)</a> from device.o(t._ZN9AllocatorIPvE4freeES0_) referenced from device.o(.constdata__ZTV13ServerFactoryI21DefaultServerListenerE)
 <LI><a href="#[7c]">Allocator&lang;void*&rang;::free(void*)</a> from device.o(t._ZN9AllocatorIPvE4freeES0_) referenced from device.o(.constdata__ZTV13ThreadFactory)
 <LI><a href="#[7c]">Allocator&lang;void*&rang;::free(void*)</a> from device.o(t._ZN9AllocatorIPvE4freeES0_) referenced from device.o(.constdata__ZTV14TimerInterface)
 <LI><a href="#[7c]">Allocator&lang;void*&rang;::free(void*)</a> from device.o(t._ZN9AllocatorIPvE4freeES0_) referenced from device.o(.constdata__ZTV9AllocatorIPvE)
 <LI><a href="#[7b]">Allocator&lang;void*&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorIPvE5allocEj) referenced 5 times from device.o(.constdata)
 <LI><a href="#[7b]">Allocator&lang;void*&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorIPvE5allocEj) referenced from device.o(.constdata__ZTV13ServerFactoryI21DefaultServerListenerE)
 <LI><a href="#[7b]">Allocator&lang;void*&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorIPvE5allocEj) referenced from device.o(.constdata__ZTV13ThreadFactory)
 <LI><a href="#[7b]">Allocator&lang;void*&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorIPvE5allocEj) referenced from device.o(.constdata__ZTV14TimerInterface)
 <LI><a href="#[7b]">Allocator&lang;void*&rang;::alloc(unsigned)</a> from device.o(t._ZN9AllocatorIPvE5allocEj) referenced from device.o(.constdata__ZTV9AllocatorIPvE)
 <LI><a href="#[85]">SensorMcu::SerialRead(unsigned char*, unsigned short)</a> from device.o(i._ZN9SensorMcu10SerialReadEPht) referenced from device.o(.constdata__ZTV9SensorMcu)
 <LI><a href="#[86]">SensorMcu::SerialWrite(unsigned char*, unsigned short)</a> from device.o(i._ZN9SensorMcu11SerialWriteEPht) referenced from device.o(.constdata__ZTV9SensorMcu)
 <LI><a href="#[84]">thunk{-212} to Runtime::free(void*)</a> from device.o(i._ZThn212_N7Runtime4freeEPv) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[83]">thunk{-212} to Runtime::alloc(unsigned)</a> from device.o(i._ZThn212_N7Runtime5allocEj) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[81]">thunk{v:0,-12} to Runtime::alloc(unsigned)</a> from device.o(i._ZTv0_n12_N7Runtime5allocEj) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[82]">thunk{v:0,-16} to Runtime::free(void*)</a> from device.o(i._ZTv0_n16_N7Runtime4freeEPv) referenced from device.o(.constdata__ZTV7Runtime)
 <LI><a href="#[89]">__main</a> from __main.o(!!!main) referenced from startup_stm32f417xx.o(.text)
 <LI><a href="#[88]">__sti___10_device_cpp_runtime</a> from device.o(i.__sti___10_device_cpp_runtime) referenced from device.o(.init_array)
 <LI><a href="#[87]">__sti___8_main_cpp_Font</a> from main.o(i.__sti___8_main_cpp_Font) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[89]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[161]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[162]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[163]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[97]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[91]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[164]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[165]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[166]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[167]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[168]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[93]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[169]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[170]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[171]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[172]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[173]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[174]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[175]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[176]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[177]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[178]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[179]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[17b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[8c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[17e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[94]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[96]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[17f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[98]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vm::init(unsigned, unsigned) &rArr; vminit(unsigned, unsigned) &rArr; Runtime::init(unsigned, unsigned) &rArr; ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[180]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[181]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[182]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[183]"></a>vmaccessLvl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stackswitching.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>upcall</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stackswitching.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::close()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::pushEvent(int(*)(void*))
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::addTimer(int(*)(void*), unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::create(int(*)(void*), unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::sleep(int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::runtimeDispatchEvent(int(*)(void*))
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::addSensorListener(int(*)(void*), int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::invokeServer(int)
</UL>

<P><STRONG><a name="[9f]"></a>vmstart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stackswitching.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vmstart &rArr; VMStart &rArr; vmstart() &rArr; RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMStart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableFPU
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::start()
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stackswitching.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysTick_Handler &rArr; VMTick &rArr; vmtick(void*) &rArr; Runtime::dispatch(void*) &rArr; void Runtime::runnablesTick&lang;Runtime*&rang;(T1) &rArr; Runtime::push(Runnable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stackswitching.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stackswitching.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SVC_Handler &rArr; VMSvc &rArr; vmsvc(SVC_arg) &rArr; Runtime::resolveAPICall(RuntimeFrame*, SVC_arg) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMSvc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>EnableFPU</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stackswitching.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmstart
</UL>

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[184]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[187]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[188]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[a4]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[7a]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[a5]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[189]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a9]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[92]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ab]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[a7]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[ad]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[95]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[af]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[a8]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[9a]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[aa]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[b0]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[18b]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[18d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b4]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[b5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b8]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[b7]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[b9]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d0]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d1]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit()
</UL>

<P><STRONG><a name="[ba]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::delay(unsigned)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerServer(void*)
</UL>

<P><STRONG><a name="[e6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
</UL>

<P><STRONG><a name="[ff]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>

<P><STRONG><a name="[e1]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSIS_Tick()
</UL>

<P><STRONG><a name="[bc]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[be]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::NVIC_GetPriorityGrouping()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 680 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1024 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SPI_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit()
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_SPI_Receive</STRONG> (Thumb, 570 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::SerialRead(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[cd]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::SerialWrite(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[cb]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 848 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[ce]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SRAM_Init &rArr; FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HsramInit()
</UL>

<P><STRONG><a name="[cf]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>StackSwitchPSV</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vm.o(i.StackSwitchPSV), UNUSED)

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>VMInit</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, vm.o(i.VMInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vminit(unsigned, unsigned)
</UL>

<P><STRONG><a name="[a1]"></a>VMStart</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, vm.o(i.VMStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VMStart &rArr; vmstart() &rArr; RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmstart()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmstart
</UL>

<P><STRONG><a name="[a3]"></a>VMSvc</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, vm.o(i.VMSvc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VMSvc &rArr; vmsvc(SVC_arg) &rArr; Runtime::resolveAPICall(RuntimeFrame*, SVC_arg) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmsvc(SVC_arg)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[a2]"></a>VMTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vm.o(i.VMTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VMTick &rArr; vmtick(void*) &rArr; Runtime::dispatch(void*) &rArr; void Runtime::runnablesTick&lang;Runtime*&rang;(T1) &rArr; Runtime::push(Runnable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMSIS_Tick()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmtick(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[df]"></a>CMSIS_Tick()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device.o(i._Z10CMSIS_Tickv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMSIS_Tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMTick
</UL>

<P><STRONG><a name="[ea]"></a>ClockEnable()</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, init.o(i._Z11ClockEnablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClockEnable()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[74]"></a>SystemEvent(void*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i._Z11SystemEventPv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z18SystemEventBurner2Pv)
</UL>
<P><STRONG><a name="[76]"></a>eventServer(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, event.o(i._Z11eventServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eventServer(void*) &rArr; vm::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vm.o(i._ZN7Runtime4initEjj)
</UL>
<P><STRONG><a name="[77]"></a>timerServer(void*)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, timerserver.o(i._Z11timerServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timerServer(void*) &rArr; vm::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::close()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerInterface&lang;TimerListener&rang;::fireChannel(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vm.o(i._ZN7Runtime4initEjj)
</UL>
<P><STRONG><a name="[e5]"></a>DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gpio_ex.o(i._Z13DEV_Gpio_InitP12GPIO_TypeDefijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit()
</UL>

<P><STRONG><a name="[fe]"></a>Error_Handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(i._Z13Error_Handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HsramInit()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[e7]"></a>DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gpio_ex.o(i._Z16DEV_AltGpio_InitP12GPIO_TypeDefijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit()
</UL>

<P><STRONG><a name="[73]"></a>touchAnyListener(void*)</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, main.o(i._Z16touchAnyListenerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = touchAnyListener(void*) &rArr; SensorAdapter::getData()
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAdapter::getData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z17SystemEventBurnerPv)
</UL>
<P><STRONG><a name="[75]"></a>SystemEventBurner(void*)</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, main.o(i._Z17SystemEventBurnerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SystemEventBurner(void*) &rArr; void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1) &rArr; int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::addTimer(int(*)(void*), unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::create(int(*)(void*), unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::runtimeDispatchEvent(int(*)(void*))
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::addSensorListener(int(*)(void*), int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(unsigned, unsigned)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HsramInit()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockEnable()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension(int, int, int, int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension(Dimension&lang;unsigned short&rang;&)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print::Print&lang;unsigned short&rang;::putChar(char, unsigned short)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::fill(unsigned short)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::enableBackLight(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vm.o(i._ZN7Runtime4initEjj)
</UL>
<P><STRONG><a name="[78]"></a>touchSensorServer(void*)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, touchsensorapiinterface.o(i._Z17touchSensorServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchSensorServer(void*) &rArr; SensorMcu::ReadPos() &rArr; SensorMcu::ReadY() &rArr; SensorMcu::Read(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::close()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerInterface&lang;DefaultServerListener&rang;::fireAll()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadPos()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadZ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vm.o(i._ZN7Runtime4initEjj)
</UL>
<P><STRONG><a name="[e9]"></a>SystemClock_Config()</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, init.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[71]"></a>SystemEventBurner2(void*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i._Z18SystemEventBurner2Pv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemEventBurner2(void*) &rArr; vm::pushEvent(int(*)(void*))
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::pushEvent(int(*)(void*))
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::sleep(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z17SystemEventBurnerPv)
</UL>
<P><STRONG><a name="[70]"></a>SystemEventBurner3(void*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._Z18SystemEventBurner3Pv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemEventBurner3(void*) &rArr; vm::sleep(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::sleep(int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::enableBackLight(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z17SystemEventBurnerPv)
</UL>
<P><STRONG><a name="[102]"></a>Free(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i._Z4FreePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;void*&rang;::free(void*)
</UL>

<P><STRONG><a name="[104]"></a>Alloc(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i._Z5Allocj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;void*&rang;::alloc(unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::alloc(unsigned)
</UL>

<P><STRONG><a name="[6f]"></a>event(void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._Z5eventPv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z17SystemEventBurnerPv)
</UL>
<P><STRONG><a name="[de]"></a>vmsvc(SVC_arg)</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, vm.o(i._Z5vmsvc7SVC_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vmsvc(SVC_arg) &rArr; Runtime::resolveAPICall(RuntimeFrame*, SVC_arg) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runnable::setFrame(RuntimeFrame*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMSvc
</UL>

<P><STRONG><a name="[72]"></a>timer0(void*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._Z6timer0Pv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer0(void*) &rArr; vm::invokeServer(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::invokeServer(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z17SystemEventBurnerPv)
</UL>
<P><STRONG><a name="[dc]"></a>vminit(unsigned, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vm.o(i._Z6vminitjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vminit(unsigned, unsigned) &rArr; Runtime::init(unsigned, unsigned) &rArr; ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::init(unsigned, unsigned)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMInit
</UL>

<P><STRONG><a name="[e0]"></a>vmtick(void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vm.o(i._Z6vmtickPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vmtick(void*) &rArr; Runtime::dispatch(void*) &rArr; void Runtime::runnablesTick&lang;Runtime*&rang;(T1) &rArr; Runtime::push(Runnable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMTick
</UL>

<P><STRONG><a name="[ec]"></a>DmaInit()</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, init.o(i._Z7DmaInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmaInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[ed]"></a>SpiInit()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, init.o(i._Z7SpiInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiInit() &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[dd]"></a>vmstart()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vm.o(i._Z7vmstartv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vmstart() &rArr; RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;Runnable&rang;::removeFirst()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMStart
</UL>

<P><STRONG><a name="[ee]"></a>GpioInit()</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, init.o(i._Z8GpioInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpioInit() &rArr; DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_AltGpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Gpio_Init(GPIO_TypeDef*, int, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[eb]"></a>HsramInit()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, init.o(i._Z9HsramInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HsramInit() &rArr; HAL_SRAM_Init &rArr; FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[151]"></a>RuntimeFrame::init(RuntimeFrame*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, vm.o(i._ZN12RuntimeFrame4initEPS_))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
</UL>

<P><STRONG><a name="[e8]"></a>SensorAdapter::getData()</STRONG> (Thumb, 30 bytes, Stack size 28 bytes, main.o(i._ZN13SensorAdapter7getDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SensorAdapter::getData()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchAnyListener(void*)
</UL>

<P><STRONG><a name="[10e]"></a>ThreadFactory::newServer(int(*)(void*), unsigned, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, vm.o(i._ZN13ThreadFactory9newServerEPFiPvEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::New&lang;Runnable&rang;(unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::operator ()(int(*)(void*), unsigned, int, void*)
</UL>

<P><STRONG><a name="[111]"></a>ThreadFactory::ThreadFactory__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(i._ZN13ThreadFactoryC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;void*&rang;::Allocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::TimerInterface__sub_object()
</UL>

<P><STRONG><a name="[113]"></a>SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, gpio_ex.o(i._ZN14SpiSoftTypeDef14send_9bit_DataEbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::deSelect()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::select()
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrData8(unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrCmd8(unsigned char)
</UL>

<P><STRONG><a name="[114]"></a>SpiSoftTypeDef::select()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_ex.o(i._ZN14SpiSoftTypeDef6selectEv))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>

<P><STRONG><a name="[115]"></a>SpiSoftTypeDef::deSelect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_ex.o(i._ZN14SpiSoftTypeDef8deSelectEv))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>

<P><STRONG><a name="[116]"></a>TimerInterface::TimerInterface__sub_object()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, device.o(i._ZN14TimerInterfaceC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerInterface::TimerInterface__sub_object() &rArr; ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;void*&rang;::Allocator()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
</UL>

<P><STRONG><a name="[117]"></a>TimerInterface::operator ()(int(*)(void*), unsigned, int, void*)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, vm.o(i._ZN14TimerInterfaceclEPFiPvEjiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TimerInterface::operator ()(int(*)(void*), unsigned, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::NewArray&lang;ArrayListBase&lang;TimerListener&rang;&rang;(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;void*&rang;::Delete&lang;ArrayListBase&lang;TimerListener&rang;&rang;(T1*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::newServer(int(*)(void*), unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
</UL>

<P><STRONG><a name="[105]"></a>MemoryAllocator::New(unsigned)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, memory_alloc.o(i._ZN15MemoryAllocator3NewEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::separate(MemoryChunk*, unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::alloc(unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[103]"></a>MemoryAllocator::Delete(void*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, memory_alloc.o(i._ZN15MemoryAllocator6DeleteEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::free(void*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free(void*)
</UL>

<P><STRONG><a name="[11e]"></a>MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, memory_alloc.o(i._ZN15MemoryAllocator8sanitizeER13ArrayListBaseI11MemoryChunkE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
</UL>

<P><STRONG><a name="[11b]"></a>MemoryAllocator::separate(MemoryChunk*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, memory_alloc.o(i._ZN15MemoryAllocator8separateEP11MemoryChunkj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryAllocator::separate(MemoryChunk*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>

<P><STRONG><a name="[11f]"></a>MemoryAllocator::MemoryAllocator()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, device.o(i._ZN15MemoryAllocatorC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryAllocator::MemoryAllocator()
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::ArrayListBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_runtime
</UL>

<P><STRONG><a name="[191]"></a>MemoryAllocator::MemoryAllocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, device.o(i._ZN15MemoryAllocatorC1Ev), UNUSED)

<P><STRONG><a name="[ef]"></a>MemoryAllocator::operator ()(unsigned, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, memory_alloc.o(i._ZN15MemoryAllocatorclEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryAllocator::operator ()(unsigned, unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
</UL>

<P><STRONG><a name="[108]"></a>vm::invokeServer(int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, vmapi.o(i._ZN2vm12invokeServerEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vm::invokeServer(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0(void*)
</UL>

<P><STRONG><a name="[f5]"></a>vm::addSensorListener(int(*)(void*), int)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, vmapi.o(i._ZN2vm17addSensorListenerEPFiPvEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vm::addSensorListener(int(*)(void*), int)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[f2]"></a>vm::runtimeDispatchEvent(int(*)(void*))</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, vmapi.o(i._ZN2vm20runtimeDispatchEventEPFiPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vm::runtimeDispatchEvent(int(*)(void*))
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[122]"></a>vm::init(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vmapi.o(i._ZN2vm4initEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vm::init(unsigned, unsigned) &rArr; vminit(unsigned, unsigned) &rArr; Runtime::init(unsigned, unsigned) &rArr; ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vminit(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>vm::close()</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, vmapi.o(i._ZN2vm5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vm::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSensorServer(void*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerServer(void*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventServer(void*)
</UL>

<P><STRONG><a name="[101]"></a>vm::sleep(int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, vmapi.o(i._ZN2vm5sleepEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vm::sleep(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner3(void*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner2(void*)
</UL>

<P><STRONG><a name="[123]"></a>vm::start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vmapi.o(i._ZN2vm5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vm::start() &rArr; vmstart &rArr; VMStart &rArr; vmstart() &rArr; RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmstart
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>vm::create(int(*)(void*), unsigned)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, vmapi.o(i._ZN2vm6createEPFiPvEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vm::create(int(*)(void*), unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[f4]"></a>vm::addTimer(int(*)(void*), unsigned)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, vmapi.o(i._ZN2vm8addTimerEPFiPvEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vm::addTimer(int(*)(void*), unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[100]"></a>vm::pushEvent(int(*)(void*))</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, vmapi.o(i._ZN2vm9pushEventEPFiPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vm::pushEvent(int(*)(void*))
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upcall
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner2(void*)
</UL>

<P><STRONG><a name="[f1]"></a>Device::enableBackLight(bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._ZN6Device15enableBackLightEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Device::enableBackLight(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner3(void*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[f0]"></a>Device::init()</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, main.o(i._ZN6Device4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Device::init() &rArr; unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension(int, int, int, int)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension(Dimension&lang;unsigned short&rang;&)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::getBox()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicFrameFactory&lang;unsigned short, unsigned short&rang;::newFrame(Dimension&lang;unsigned short&rang;)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::fill(unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::~Synchronize()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::Synchronize(ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[140]"></a>Device::Device()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, device.o(i._ZN6DeviceC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_runtime
</UL>

<P><STRONG><a name="[192]"></a>Device::Device__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(i._ZN6DeviceC1Ev), UNUSED)

<P><STRONG><a name="[12c]"></a>Runtime::getAvailable(int)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vm.o(i._ZN7Runtime12getAvailableEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Runtime::getAvailable(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;Runnable&rang;::removeFirst()
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[107]"></a>Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)</STRONG> (Thumb, 448 bytes, Stack size 88 bytes, vm.o(i._ZN7Runtime14resolveAPICallEP12RuntimeFrame7SVC_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Runtime::resolveAPICall(RuntimeFrame*, SVC_arg) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::New&lang;Runnable&rang;(unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::New&lang;TimerListener&rang;()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerInterface&lang;TimerListener&rang;::addListener(TimerListener*, unsigned)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::addServerListener(int(*)(void*), int, int)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::invokeServer(int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;Runnable&rang;::addFirst(Runnable*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runnable::init(int(*)(void*), unsigned, int, int, int)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::push(Runnable*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::getAvailable(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmsvc(SVC_arg)
</UL>

<P><STRONG><a name="[80]"></a>Runtime::free(void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i._ZN7Runtime4freeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Runtime::free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-16} to Runtime::free(void*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to Runtime::free(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7Runtime)
</UL>
<P><STRONG><a name="[109]"></a>Runtime::init(unsigned, unsigned)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, vm.o(i._ZN7Runtime4initEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Runtime::init(unsigned, unsigned) &rArr; ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::Init(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(unsigned, unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;Runnable&rang;::addFirst(Runnable*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::operator ()(int(*)(void*), unsigned, int, void*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::newServer(int(*)(void*), unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vminit(unsigned, unsigned)
</UL>

<P><STRONG><a name="[132]"></a>Runtime::push(Runnable*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vm.o(i._ZN7Runtime4pushEP8Runnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Runtime::push(Runnable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Runtime::runnablesTick&lang;Runtime*&rang;(T1)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[7f]"></a>Runtime::alloc(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i._ZN7Runtime5allocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Runtime::alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{v:0,-12} to Runtime::alloc(unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-212} to Runtime::alloc(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7Runtime)
</UL>
<P><STRONG><a name="[10a]"></a>Runtime::dispatch(void*)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, vm.o(i._ZN7Runtime8dispatchEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Runtime::dispatch(void*) &rArr; void Runtime::runnablesTick&lang;Runtime*&rang;(T1) &rArr; Runtime::push(Runnable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Runtime::runnablesTick&lang;Runtime*&rang;(T1)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunnbleInterface&lang;Runnable&rang;::reset(void*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runnable::setFrame(RuntimeFrame*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::push(Runnable*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::getAvailable(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmtick(void*)
</UL>

<P><STRONG><a name="[137]"></a>Runtime::Runtime__sub_object()</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, device.o(i._ZN7RuntimeC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Runtime::Runtime__sub_object() &rArr; ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object() &rArr; ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;Runnable&rang;::ArrayListBase()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;void*&rang;::Allocator()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::MemoryAllocator()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::TimerInterface__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::ThreadFactory__sub_object()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_device_cpp_runtime
</UL>

<P><STRONG><a name="[110]"></a>Runnable::init(int(*)(void*), unsigned, int, int, int)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, vm.o(i._ZN8Runnable4initEPFiPvEjiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runnable::initTcb(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::newServer(int(*)(void*), unsigned, unsigned)
</UL>

<P><STRONG><a name="[13a]"></a>Runnable::initTcb(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, vm.o(i._ZN8Runnable7initTcbEj))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>

<P><STRONG><a name="[106]"></a>Runnable::setFrame(RuntimeFrame*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vm.o(i._ZN8Runnable8setFrameEP12RuntimeFrame))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmsvc(SVC_arg)
</UL>

<P><STRONG><a name="[112]"></a>Allocator&lang;void*&rang;::Allocator()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(i._ZN9AllocatorIPvEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::TimerInterface__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::ThreadFactory__sub_object()
</UL>

<P><STRONG><a name="[193]"></a>Allocator&lang;void*&rang;::Allocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(i._ZN9AllocatorIPvEC1Ev), UNUSED)

<P><STRONG><a name="[85]"></a>SensorMcu::SerialRead(unsigned char*, unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i._ZN9SensorMcu10SerialReadEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SensorMcu::SerialRead(unsigned char*, unsigned short) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV9SensorMcu)
</UL>
<P><STRONG><a name="[86]"></a>SensorMcu::SerialWrite(unsigned char*, unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i._ZN9SensorMcu11SerialWriteEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SensorMcu::SerialWrite(unsigned char*, unsigned short) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV9SensorMcu)
</UL>
<P><STRONG><a name="[134]"></a>SensorMcu::Init(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tsc2046.o(i._ZN9SensorMcu4InitEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SensorMcu::Init(unsigned char, unsigned char, unsigned char) &rArr; SensorMcu::Apply(TouchMcuPreset&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::Apply(TouchMcuPreset&)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
</UL>

<P><STRONG><a name="[13d]"></a>SensorMcu::Read(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tsc2046.o(i._ZN9SensorMcu4ReadEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SensorMcu::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadZ()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadY()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadX()
</UL>

<P><STRONG><a name="[13b]"></a>SensorMcu::Apply(TouchMcuPreset&)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tsc2046.o(i._ZN9SensorMcu5ApplyER14TouchMcuPreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SensorMcu::Apply(TouchMcuPreset&)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::Init(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13c]"></a>SensorMcu::ReadX()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsc2046.o(i._ZN9SensorMcu5ReadXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SensorMcu::ReadX() &rArr; SensorMcu::Read(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadPos()
</UL>

<P><STRONG><a name="[13e]"></a>SensorMcu::ReadY()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsc2046.o(i._ZN9SensorMcu5ReadYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SensorMcu::ReadY() &rArr; SensorMcu::Read(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadPos()
</UL>

<P><STRONG><a name="[fb]"></a>SensorMcu::ReadZ()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsc2046.o(i._ZN9SensorMcu5ReadZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SensorMcu::ReadZ() &rArr; SensorMcu::Read(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::Read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSensorServer(void*)
</UL>

<P><STRONG><a name="[fc]"></a>SensorMcu::ReadPos()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tsc2046.o(i._ZN9SensorMcu7ReadPosEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SensorMcu::ReadPos() &rArr; SensorMcu::ReadY() &rArr; SensorMcu::Read(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadY()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorMcu::ReadX()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSensorServer(void*)
</UL>

<P><STRONG><a name="[84]"></a>thunk{-212} to Runtime::free(void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i._ZThn212_N7Runtime4freeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = thunk{-212} to Runtime::free(void*) &rArr; Runtime::free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::free(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7Runtime)
</UL>
<P><STRONG><a name="[83]"></a>thunk{-212} to Runtime::alloc(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i._ZThn212_N7Runtime5allocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{-212} to Runtime::alloc(unsigned) &rArr; Runtime::alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::alloc(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7Runtime)
</UL>
<P><STRONG><a name="[81]"></a>thunk{v:0,-12} to Runtime::alloc(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, device.o(i._ZTv0_n12_N7Runtime5allocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = thunk{v:0,-12} to Runtime::alloc(unsigned) &rArr; Runtime::alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::alloc(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7Runtime)
</UL>
<P><STRONG><a name="[82]"></a>thunk{v:0,-16} to Runtime::free(void*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, device.o(i._ZTv0_n16_N7Runtime4freeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = thunk{v:0,-16} to Runtime::free(void*) &rArr; Runtime::free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::free(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV7Runtime)
</UL>
<P><STRONG><a name="[126]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
</UL>

<P><STRONG><a name="[e3]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerServer(void*)
</UL>

<P><STRONG><a name="[99]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; vm::init(unsigned, unsigned) &rArr; vminit(unsigned, unsigned) &rArr; Runtime::init(unsigned, unsigned) &rArr; ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::start()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm::init(unsigned, unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[128]"></a>Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::Synchronize(ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(t._ZN11SynchronizeI12ScreenDriverI7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE12GraphicFrameIttEEEC1EPS7_))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[194]"></a>Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::Synchronize__sub_object(ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN11SynchronizeI12ScreenDriverI7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE12GraphicFrameIttEEEC1EPS7_), UNUSED)

<P><STRONG><a name="[129]"></a>Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::~Synchronize()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(t._ZN11SynchronizeI12ScreenDriverI7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE12GraphicFrameIttEEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[195]"></a>Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::~Synchronize__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN11SynchronizeI12ScreenDriverI7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE12GraphicFrameIttEEED1Ev), UNUSED)

<P><STRONG><a name="[f8]"></a>GContentPane&lang;unsigned short&rang;::fill(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(t._ZN12GContentPaneItE4fillEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GContentPane&lang;unsigned short&rang;::fill(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[127]"></a>GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*)</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, main.o(t._ZN12GContentPaneItEC1EP12GraphicFrameIttE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::getBox()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print::Print&lang;unsigned short&rang;::Print__sub_object(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[196]"></a>GContentPane&lang;unsigned short&rang;::GContentPane__sub_object(GraphicFrame&lang;unsigned short, unsigned short&rang;*)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, main.o(t._ZN12GContentPaneItEC1EP12GraphicFrameIttE), UNUSED)

<P><STRONG><a name="[141]"></a>void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, main.o(t._ZN12ScreenDriverI7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE12GraphicFrameIttEE4fillIiEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::toggleDot()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::putColor&lang;unsigned short&rang;(T1)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::~Synchronize()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::Synchronize(ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1)</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, main.o(t._ZN12ScreenDriverI7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE12GraphicFrameIttEE4fillItEEvPS5_R8ViewPortT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1) &rArr; int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::getBox()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::~Synchronize()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Synchronize&lang;ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;&rang;::Synchronize(ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[11c]"></a>ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, memory_alloc.o(t._ZN13ArrayListBaseI11MemoryChunkE3addEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::operator ()(unsigned, unsigned)
</UL>

<P><STRONG><a name="[149]"></a>ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, memory_alloc.o(t._ZN13ArrayListBaseI11MemoryChunkE3addERS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*)
</UL>

<P><STRONG><a name="[11a]"></a>ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, memory_alloc.o(t._ZN13ArrayListBaseI11MemoryChunkE6removeEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::Delete(void*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::New(unsigned)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&)
</UL>

<P><STRONG><a name="[14a]"></a>ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memory_alloc.o(t._ZN13ArrayListBaseI11MemoryChunkE6removeERS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*)
</UL>

<P><STRONG><a name="[120]"></a>ArrayListBase&lang;MemoryChunk&rang;::ArrayListBase()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(t._ZN13ArrayListBaseI11MemoryChunkEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::MemoryAllocator()
</UL>

<P><STRONG><a name="[197]"></a>ArrayListBase&lang;MemoryChunk&rang;::ArrayListBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(t._ZN13ArrayListBaseI11MemoryChunkEC1Ev), UNUSED)

<P><STRONG><a name="[10c]"></a>ArrayListBase&lang;Runnable&rang;::removeFirst()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, vm.o(t._ZN13ArrayListBaseI8RunnableE11removeFirstEv))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::getAvailable(int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmstart()
</UL>

<P><STRONG><a name="[160]"></a>ArrayListBase&lang;Runnable&rang;::remove(Runnable&)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vm.o(t._ZN13ArrayListBaseI8RunnableE6removeERS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArrayListBase&lang;Runnable&rang;::remove(Runnable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Runtime::runnablesTick&lang;Runtime*&rang;(T1)
</UL>

<P><STRONG><a name="[12d]"></a>ArrayListBase&lang;Runnable&rang;::addFirst(Runnable*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vm.o(t._ZN13ArrayListBaseI8RunnableE8addFirstEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArrayListBase&lang;Runnable&rang;::addFirst(Runnable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[79]"></a>ArrayListBase&lang;Runnable&rang;::ArrayListBase()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(t._ZN13ArrayListBaseI8RunnableEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(i._ZN7RuntimeC2Ev)
</UL>
<P><STRONG><a name="[198]"></a>ArrayListBase&lang;Runnable&rang;::ArrayListBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, device.o(t._ZN13ArrayListBaseI8RunnableEC1Ev), UNUSED)

<P><STRONG><a name="[7d]"></a>ServerFactory&lang;DefaultServerListener&rang;::newListener(int(*)(void*))</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, device.o(t._ZN13ServerFactoryI21DefaultServerListenerE11newListenerEPFiPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServerFactory&lang;DefaultServerListener&rang;::newListener(int(*)(void*)) &rArr; T1* Allocator&lang;void*&rang;::New&lang;DefaultServerListener&rang;()
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::New&lang;DefaultServerListener&rang;()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device.o(.constdata)
<LI> device.o(.constdata__ZTV7Runtime)
<LI> device.o(.constdata__ZTV13ServerFactoryI21DefaultServerListenerE)
</UL>
<P><STRONG><a name="[131]"></a>ServerFactory&lang;DefaultServerListener&rang;::invokeServer(int)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, vm.o(t._ZN13ServerFactoryI21DefaultServerListenerE12invokeServerEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServerFactory&lang;DefaultServerListener&rang;::invokeServer(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunnbleInterface&lang;Runnable&rang;::reset(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[133]"></a>ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, vm.o(t._ZN13ServerFactoryI21DefaultServerListenerE13installServerEPFiPvEiiS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*) &rArr; ThreadFactory::newServer(int(*)(void*), unsigned, unsigned) &rArr; Runnable::init(int(*)(void*), unsigned, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::NewArray&lang;ArrayListBase&lang;DefaultServerListener&rang;&rang;(unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;void*&rang;::Delete&lang;ServerInterface&lang;DefaultServerListener&rang;&rang;(T1*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int Allocator&lang;void*&rang;::Delete&lang;ArrayListBase&lang;DefaultServerListener&rang;&rang;(T1*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* Allocator&lang;void*&rang;::New&lang;ServerInterface&lang;DefaultServerListener&rang;&rang;()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::newServer(int(*)(void*), unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::init(unsigned, unsigned)
</UL>

<P><STRONG><a name="[130]"></a>ServerFactory&lang;DefaultServerListener&rang;::addServerListener(int(*)(void*), int, int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vm.o(t._ZN13ServerFactoryI21DefaultServerListenerE17addServerListenerEPFiPvEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ServerFactory&lang;DefaultServerListener&rang;::addServerListener(int(*)(void*), int, int) &rArr; ServerInterface&lang;DefaultServerListener&rang;::addListener(DefaultServerListener*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerInterface&lang;DefaultServerListener&rang;::addListener(DefaultServerListener*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[138]"></a>ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, device.o(t._ZN13ServerFactoryI21DefaultServerListenerEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object() &rArr; ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;void*&rang;::Allocator()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
</UL>

<P><STRONG><a name="[12f]"></a>ServerInterface&lang;TimerListener&rang;::addListener(TimerListener*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, vm.o(t._ZN15ServerInterfaceI13TimerListenerE11addListenerEPS0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ServerInterface&lang;TimerListener&rang;::addListener(TimerListener*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[e4]"></a>ServerInterface&lang;TimerListener&rang;::fireChannel(unsigned)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, timerserver.o(t._ZN15ServerInterfaceI13TimerListenerE11fireChannelEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServerInterface&lang;TimerListener&rang;::fireChannel(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerServer(void*)
</UL>

<P><STRONG><a name="[150]"></a>ServerInterface&lang;DefaultServerListener&rang;::addListener(DefaultServerListener*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, vm.o(t._ZN15ServerInterfaceI21DefaultServerListenerE11addListenerEPS0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ServerInterface&lang;DefaultServerListener&rang;::addListener(DefaultServerListener*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::addServerListener(int(*)(void*), int, int)
</UL>

<P><STRONG><a name="[fd]"></a>ServerInterface&lang;DefaultServerListener&rang;::fireAll()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, touchsensorapiinterface.o(t._ZN15ServerInterfaceI21DefaultServerListenerE7fireAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServerInterface&lang;DefaultServerListener&rang;::fireAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchSensorServer(void*)
</UL>

<P><STRONG><a name="[135]"></a>RunnbleInterface&lang;Runnable&rang;::reset(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vm.o(t._ZN16RunnbleInterfaceI8RunnableE5resetEPv))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::invokeServer(int)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
</UL>

<P><STRONG><a name="[10d]"></a>RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, vm.o(t._ZN16RunnbleInterfaceI8RunnableE8getFrameEP12RuntimeFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RunnbleInterface&lang;Runnable&rang;::getFrame(RuntimeFrame*)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RuntimeFrame::init(RuntimeFrame*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vmstart()
</UL>

<P><STRONG><a name="[125]"></a>GraphicFrameFactory&lang;unsigned short, unsigned short&rang;::newFrame(Dimension&lang;unsigned short&rang;)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, main.o(t._ZN19GraphicFrameFactoryIttE8newFrameE9DimensionItE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GraphicFrameFactory&lang;unsigned short, unsigned short&rang;::newFrame(Dimension&lang;unsigned short&rang;) &rArr; Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::New(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension(Dimension&lang;unsigned short&rang;&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::New(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[f9]"></a>print::Print&lang;unsigned short&rang;::putChar(char, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, main.o(t._ZN5print5PrintItE7putCharEct))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = print::Print&lang;unsigned short&rang;::putChar(char, unsigned short) &rArr; int print::Print&lang;unsigned short&rang;::printChar&lang;const tImage&lang;unsigned short&rang;&rang;(int, int, T1*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int print::Print&lang;unsigned short&rang;::printChar&lang;const tImage&lang;unsigned short&rang;&rang;(int, int, T1*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[153]"></a>int print::Print&lang;unsigned short&rang;::printChar&lang;const tImage&lang;unsigned short&rang;&rang;(int, int, T1*, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 44 bytes, main.o(t._ZN5print5PrintItE9printCharIK6tImageItEEEiiiPT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = int print::Print&lang;unsigned short&rang;::printChar&lang;const tImage&lang;unsigned short&rang;&rang;(int, int, T1*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print::Print&lang;unsigned short&rang;::putChar(char, unsigned short)
</UL>

<P><STRONG><a name="[143]"></a>print::Print&lang;unsigned short&rang;::Print__sub_object(GraphicFrame&lang;unsigned short, unsigned short&rang;*)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, main.o(t._ZN5print5PrintItEC2EP12GraphicFrameIttE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = print::Print&lang;unsigned short&rang;::Print__sub_object(GraphicFrame&lang;unsigned short, unsigned short&rang;*) &rArr; Dimension&lang;unsigned short&rang;::getBox()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::Dimension()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dimension&lang;unsigned short&rang;::getBox()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
</UL>

<P><STRONG><a name="[154]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE10driverFillEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::toggleDot()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::putColor&lang;unsigned short&rang;(T1)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)
</UL>

<P><STRONG><a name="[148]"></a>int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE10driverFillItEEiPT_3BoxItES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::toggleDot()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::rgbOut&lang;unsigned short&rang;(T1)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1)
</UL>

<P><STRONG><a name="[12b]"></a>unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE10driverFillItEEjPT_3BoxItE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setDot(bool)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::rgbOut&lang;unsigned short&rang;(T1)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[158]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::resetForce(bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE10resetForceEb))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init()
</UL>

<P><STRONG><a name="[124]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init()</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::delay(unsigned) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrData8(unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrCmd8(unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::delay(unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::resetForce(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[159]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::delay(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE5delayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::delay(unsigned) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init()
</UL>

<P><STRONG><a name="[147]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE5hsClkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setDen(bool)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setHs(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
</UL>

<P><STRONG><a name="[15d]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setHs(bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE5setHsEb))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
</UL>

<P><STRONG><a name="[15f]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setVs(bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE5setVsEb))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()
</UL>

<P><STRONG><a name="[144]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE5vsClkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setVs(bool)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
</UL>

<P><STRONG><a name="[15e]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE6dotClkEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::toggleDot()
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
</UL>

<P><STRONG><a name="[156]"></a>void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::rgbOut&lang;unsigned short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE6rgbOutItEEvT_))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::putColor&lang;unsigned short&rang;(T1)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)
</UL>

<P><STRONG><a name="[15c]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setDen(bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE6setDenEb))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk()
</UL>

<P><STRONG><a name="[157]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::setDot(bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE6setDotEb))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)
</UL>

<P><STRONG><a name="[155]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE6windowEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::hsClk() &rArr; ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrData8(unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrCmd8(unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::vsClk()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[15a]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrCmd8(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE6wrCmd8Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrCmd8(unsigned char) &rArr; SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init()
</UL>

<P><STRONG><a name="[15b]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrData8(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE7wrData8Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::wrData8(unsigned char) &rArr; SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSoftTypeDef::send_9bit_Data(bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::window(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::init()
</UL>

<P><STRONG><a name="[145]"></a>void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::putColor&lang;unsigned short&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE8putColorItEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::putColor&lang;unsigned short&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::rgbOut&lang;unsigned short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
</UL>

<P><STRONG><a name="[146]"></a>ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::toggleDot()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(t._ZN7ILI9488I12GPIO_TypeDef14SpiSoftTypeDefE9toggleDotEv))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::dotClk(unsigned)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill&lang;unsigned short&rang;(T1*, Box&lang;unsigned short&rang;, Box&lang;unsigned short&rang;)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;::driverFill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;int&rang;(T1)
</UL>

<P><STRONG><a name="[136]"></a>void Runtime::runnablesTick&lang;Runtime*&rang;(T1)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, vm.o(t._ZN7Runtime13runnablesTickIPS_EEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = void Runtime::runnablesTick&lang;Runtime*&rang;(T1) &rArr; Runtime::push(Runnable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayListBase&lang;Runnable&rang;::remove(Runnable&)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::push(Runnable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::dispatch(void*)
</UL>

<P><STRONG><a name="[152]"></a>Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::New(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(t._ZN9AllocatorI12GraphicFrameIttEE3NewEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::New(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicFrameFactory&lang;unsigned short, unsigned short&rang;::newFrame(Dimension&lang;unsigned short&rang;)
</UL>

<P><STRONG><a name="[7e]"></a>Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::alloc(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, device.o(t._ZN9AllocatorI12GraphicFrameIttEE5allocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Allocator&lang;GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::alloc(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> device.o(.constdata__ZTV9AllocatorI12GraphicFrameIttEE)
<LI> device.o(.constdata__ZTV19GraphicFrameFactoryIttE)
</UL>
<P><STRONG><a name="[12e]"></a>T1* Allocator&lang;void*&rang;::New&lang;TimerListener&rang;()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vm.o(t._ZN9AllocatorIPvE3NewI13TimerListenerEEPT_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T1* Allocator&lang;void*&rang;::New&lang;TimerListener&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
</UL>

<P><STRONG><a name="[14c]"></a>T1* Allocator&lang;void*&rang;::New&lang;ServerInterface&lang;DefaultServerListener&rang;&rang;()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vm.o(t._ZN9AllocatorIPvE3NewI15ServerInterfaceI21DefaultServerListenerEEEPT_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T1* Allocator&lang;void*&rang;::New&lang;ServerInterface&lang;DefaultServerListener&rang;&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)
</UL>

<P><STRONG><a name="[14b]"></a>T1* Allocator&lang;void*&rang;::New&lang;DefaultServerListener&rang;()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, device.o(t._ZN9AllocatorIPvE3NewI21DefaultServerListenerEEPT_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T1* Allocator&lang;void*&rang;::New&lang;DefaultServerListener&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::newListener(int(*)(void*))
</UL>

<P><STRONG><a name="[10f]"></a>T1* Allocator&lang;void*&rang;::New&lang;Runnable&rang;(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vm.o(t._ZN9AllocatorIPvE3NewI8RunnableEEPT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1* Allocator&lang;void*&rang;::New&lang;Runnable&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::resolveAPICall(RuntimeFrame*, SVC_arg)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFactory::newServer(int(*)(void*), unsigned, unsigned)
</UL>

<P><STRONG><a name="[7c]"></a>Allocator&lang;void*&rang;::free(void*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, device.o(t._ZN9AllocatorIPvE4freeES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Allocator&lang;void*&rang;::free(void*) &rArr; Free(void*) &rArr; MemoryAllocator::Delete(void*) &rArr; MemoryAllocator::sanitize(ArrayListBase&lang;MemoryChunk&rang;&) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::remove(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free(void*)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> device.o(.constdata)
<LI> device.o(.constdata__ZTV9AllocatorIPvE)
<LI> device.o(.constdata__ZTV13ThreadFactory)
<LI> device.o(.constdata__ZTV14TimerInterface)
<LI> device.o(.constdata__ZTV13ServerFactoryI21DefaultServerListenerE)
</UL>
<P><STRONG><a name="[7b]"></a>Allocator&lang;void*&rang;::alloc(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, device.o(t._ZN9AllocatorIPvE5allocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Allocator&lang;void*&rang;::alloc(unsigned) &rArr; Alloc(unsigned) &rArr; MemoryAllocator::New(unsigned) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk*) &rArr; ArrayListBase&lang;MemoryChunk&rang;::add(MemoryChunk&)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc(unsigned)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> device.o(.constdata)
<LI> device.o(.constdata__ZTV9AllocatorIPvE)
<LI> device.o(.constdata__ZTV13ThreadFactory)
<LI> device.o(.constdata__ZTV14TimerInterface)
<LI> device.o(.constdata__ZTV13ServerFactoryI21DefaultServerListenerE)
</UL>
<P><STRONG><a name="[119]"></a>int Allocator&lang;void*&rang;::Delete&lang;ArrayListBase&lang;TimerListener&rang;&rang;(T1*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vm.o(t._ZN9AllocatorIPvE6DeleteI13ArrayListBaseI13TimerListenerEEEiPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int Allocator&lang;void*&rang;::Delete&lang;ArrayListBase&lang;TimerListener&rang;&rang;(T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::operator ()(int(*)(void*), unsigned, int, void*)
</UL>

<P><STRONG><a name="[14f]"></a>int Allocator&lang;void*&rang;::Delete&lang;ArrayListBase&lang;DefaultServerListener&rang;&rang;(T1*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vm.o(t._ZN9AllocatorIPvE6DeleteI13ArrayListBaseI21DefaultServerListenerEEEiPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int Allocator&lang;void*&rang;::Delete&lang;ArrayListBase&lang;DefaultServerListener&rang;&rang;(T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)
</UL>

<P><STRONG><a name="[14e]"></a>int Allocator&lang;void*&rang;::Delete&lang;ServerInterface&lang;DefaultServerListener&rang;&rang;(T1*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vm.o(t._ZN9AllocatorIPvE6DeleteI15ServerInterfaceI21DefaultServerListenerEEEiPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int Allocator&lang;void*&rang;::Delete&lang;ServerInterface&lang;DefaultServerListener&rang;&rang;(T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)
</UL>

<P><STRONG><a name="[118]"></a>T1* Allocator&lang;void*&rang;::NewArray&lang;ArrayListBase&lang;TimerListener&rang;&rang;(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vm.o(t._ZN9AllocatorIPvE8NewArrayI13ArrayListBaseI13TimerListenerEEEPT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1* Allocator&lang;void*&rang;::NewArray&lang;ArrayListBase&lang;TimerListener&rang;&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInterface::operator ()(int(*)(void*), unsigned, int, void*)
</UL>

<P><STRONG><a name="[14d]"></a>T1* Allocator&lang;void*&rang;::NewArray&lang;ArrayListBase&lang;DefaultServerListener&rang;&rang;(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vm.o(t._ZN9AllocatorIPvE8NewArrayI13ArrayListBaseI21DefaultServerListenerEEEPT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1* Allocator&lang;void*&rang;::NewArray&lang;ArrayListBase&lang;DefaultServerListener&rang;&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerFactory&lang;DefaultServerListener&rang;::installServer(int(*)(void*), int, int, void*)
</UL>

<P><STRONG><a name="[12a]"></a>Dimension&lang;unsigned short&rang;::getBox()</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, main.o(t._ZN9DimensionItE6getBoxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dimension&lang;unsigned short&rang;::getBox()
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print::Print&lang;unsigned short&rang;::Print__sub_object(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ScreenDriver&lang;ILI9488&lang;GPIO_TypeDef, SpiSoftTypeDef&rang;, GraphicFrame&lang;unsigned short, unsigned short&rang;&rang;::fill&lang;unsigned short&rang;(GraphicFrame&lang;unsigned short, unsigned short&rang;*, ViewPort&, T1)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
</UL>

<P><STRONG><a name="[f7]"></a>Dimension&lang;unsigned short&rang;::Dimension(Dimension&lang;unsigned short&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(t._ZN9DimensionItEC1ERS0_))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GraphicFrameFactory&lang;unsigned short, unsigned short&rang;::newFrame(Dimension&lang;unsigned short&rang;)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[199]"></a>Dimension&lang;unsigned short&rang;::Dimension__sub_object(Dimension&lang;unsigned short&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN9DimensionItEC1ERS0_), UNUSED)

<P><STRONG><a name="[f6]"></a>Dimension&lang;unsigned short&rang;::Dimension(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, main.o(t._ZN9DimensionItEC1Eiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dimension&lang;unsigned short&rang;::Dimension(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::init()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventBurner(void*)
</UL>

<P><STRONG><a name="[19a]"></a>Dimension&lang;unsigned short&rang;::Dimension__sub_object(int, int, int, int)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, main.o(t._ZN9DimensionItEC1Eiiii), UNUSED)

<P><STRONG><a name="[142]"></a>Dimension&lang;unsigned short&rang;::Dimension()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(t._ZN9DimensionItEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print::Print&lang;unsigned short&rang;::Print__sub_object(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GContentPane&lang;unsigned short&rang;::GContentPane(GraphicFrame&lang;unsigned short, unsigned short&rang;*)
</UL>

<P><STRONG><a name="[19b]"></a>Dimension&lang;unsigned short&rang;::Dimension__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(t._ZN9DimensionItEC1Ev), UNUSED)

<P><STRONG><a name="[90]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[19c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[19d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[87]"></a>__sti___8_main_cpp_Font</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.__sti___8_main_cpp_Font))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[88]"></a>__sti___10_device_cpp_runtime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device.o(i.__sti___10_device_cpp_runtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___10_device_cpp_runtime &rArr; Runtime::Runtime__sub_object() &rArr; ServerFactory&lang;DefaultServerListener&rang;::ServerFactory__sub_object() &rArr; ThreadFactory::ThreadFactory__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime::Runtime__sub_object()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryAllocator::MemoryAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.init_array)
</UL>
<P><STRONG><a name="[c4]"></a>[local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc016NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c3]"></a>[local to stm32f4xx_hal_cortex_c]::NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc024NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[cc]"></a>[local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_WaitOnFlagUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_WaitOnFlagUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[6e]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
